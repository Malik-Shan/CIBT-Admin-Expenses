---
export const prerender = false;
import Layout from '../layouts/Layout.astro';
import Topbar from '../components/Topbar.astro';
import SideNavigation from '../components/SideNavigation.astro';
import StatsCard from '../components/StatsCard.astro';
import RecentTransactions from '../components/RecentTransactions.astro';
import PendingTransactions from '../components/PendingTransactions.astro';

import * as DataOf from '../content/cms/eco-dataof.md'
const date = Intl.DateTimeFormat('en-PK',{
	timeZone:'Asia/Karachi',
	month: 'short',
	year: '2-digit',
}).format(new Date()).split(" ").join('-');
const d = await fetch(`${import.meta.env.EXPENSE_APPSCRIPT}?type=stats&sheetname=${date}`);
const p = await fetch(`${import.meta.env.EXPENSE_APPSCRIPT}?type=pending&sheetname=${date}`);
const {receivings,spendings,recent,totalTransactions} = await d.json();
const {result} = await p.json();
---
<Layout title="Expense Dashboard">

	<main class='w-full h-full min-h-dvh'>

		<Topbar />
		<SideNavigation />
		

		<section class='w-full h-[calc(100dvh_-_var(--topbar-height))] min-h-full overflow-y-auto pl-[var(--left-nav-width)] bg-slate-900'>
			<div class='content container mx-auto px-4'>

				<div class='infoCards grid grid-cols-4 max-xl:grid-cols-2 max-sm:grid-cols-1 pt-8 gap-4'>
					{
					DataOf.frontmatter.data.map((d) => (
					<StatsCard iconClass={d.icon} statName={d.name} receivings={receivings} spendings={spendings} totalTransactions={totalTransactions}/>
					))
					}

				</div>
				<div class='transaction-data max-2xl:grid-cols-1 gap-4 pt-8 mb-4'>

					<div class='wrapper w-full h-full border border-slate-600 bg-slate-700 flex justify-center rounded-sm'>
						<div id='chart1' class=' block mx-auto w-full min-w-full max-w-[800px] min-h-[400px]'></div>
					</div>

					<div class='recent bg-slate-700 border border-slate-600 rounded-sm p-4 h-[400px] overflow-y-auto space-y-4'>
						<h2 class='text-2xl text-slate-300 font-bold mb-2'>RECENT</h2>

						{
						recent.map((r) => (
							<RecentTransactions receiver={r.receiver} reason={r.reason} amount={r.amount} />

						))
						}

					</div>
				</div>

				<div class='processing mb-8'>
					<h2 class='text-2xl text-slate-200 font-bold mb-2'>Processing Transaction</h2>
					<div class='transactions flex flex-col gap-2'>
						
						{
						result.map((r) => (
							<PendingTransactions id={r.id} receiver={r.receiver} reason={r.reason} amount={r.amount} sheetname={date} received={r.received} />
						))
						}

					</div>
				</div>

			</div>
		</section>
	</main>

</Layout>
<style>
.transaction-data{
	display:grid;
	grid-template-columns:3fr 1fr;
}
@media(max-width:1250px){
	.transaction-data{
		grid-template-columns:1fr;
	}
}

</style>
